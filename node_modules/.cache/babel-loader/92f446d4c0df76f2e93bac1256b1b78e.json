{"ast":null,"code":"var _jsxFileName = \"/home/aaqib/Desktop/Client/hermer/wallet_connection/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport MyRoutes from './router/MyRoutes.js';\nimport { ConnectionProvider, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { getLedgerWallet, getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletExtensionWallet, getSolletWallet } from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Mainnet; // You can also provide a custom RPC endpoint\n\n  const endpoint = React.useMemo(() => clusterApiUrl(network), [network]); // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n\n  const wallets = React.useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getLedgerWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], [network]);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(MyRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aaqib/Desktop/Client/hermer/wallet_connection/src/App.tsx"],"names":["React","MyRoutes","ConnectionProvider","WalletProvider","WalletAdapterNetwork","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletExtensionWallet","getSolletWallet","clusterApiUrl","App","network","Mainnet","endpoint","useMemo","wallets"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,SACEC,kBADF,EAEEC,cAFF,QAGO,8BAHP;AAIA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SACEC,eADF,EAEEC,gBAFF,EAGEC,cAHF,EAIEC,iBAJF,EAKEC,wBALF,EAMEC,eANF,QAQO,gCARP;AASA,SAASC,aAAT,QAA8B,iBAA9B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,OAAO,GAAGT,oBAAoB,CAACU,OAArC,CAFa,CAIb;;AACA,QAAMC,QAAQ,GAAGf,KAAK,CAACgB,OAAN,CAAc,MAAML,aAAa,CAACE,OAAD,CAAjC,EAA4C,CAACA,OAAD,CAA5C,CAAjB,CALa,CAOb;AACA;;AACA,QAAMI,OAAO,GAAGjB,KAAK,CAACgB,OAAN,CACd,MAAM,CACJV,gBAAgB,EADZ,EAEJC,cAAc,EAFV,EAGJC,iBAAiB,EAHb,EAIJH,eAAe,EAJX,EAKJK,eAAe,CAAC;AAAEG,IAAAA;AAAF,GAAD,CALX,EAMJJ,wBAAwB,CAAC;AAAEI,IAAAA;AAAF,GAAD,CANpB,CADQ,EASd,CAACA,OAAD,CATc,CAAhB;AAYA,sBACE,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEE,QAA9B;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEE,OAAzB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA9BQL,G;;KAAAA,G;AAgCT,eAAeA,GAAf","sourcesContent":["import React, { Children } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport MyRoutes from './router/MyRoutes.js';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getLedgerWallet,\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletExtensionWallet,\r\n  getSolletWallet,\r\n  getTorusWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\"; \r\n\r\nfunction App() {\r\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n  const network = WalletAdapterNetwork.Mainnet;\r\n\r\n  // You can also provide a custom RPC endpoint\r\n  const endpoint = React.useMemo(() => clusterApiUrl(network), [network]);\r\n\r\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n  // Only the wallets you configure here will be compiled into your application\r\n  const wallets = React.useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSlopeWallet(),\r\n      getSolflareWallet(),\r\n      getLedgerWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [network]\r\n  );\r\n\r\n  return (\r\n    <ConnectionProvider endpoint={endpoint}>\r\n      <WalletProvider wallets={wallets}>\r\n        <div className=\"App\">\r\n          <MyRoutes />  \r\n        </div>\r\n      </WalletProvider>\r\n    </ConnectionProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}